{"name":"Decko","tagline":"A collection of the 3 most useful ES7 decorators: bind, memoize and debounce.","body":"# decko [![NPM Version](http://img.shields.io/npm/v/decko.svg?style=flat)](https://npmjs.com/package/decko) [![Build Status](https://travis-ci.org/developit/decko.svg?branch=master)](https://travis-ci.org/developit/decko)\r\n\r\n> A collection of the most useful [decorators](https://github.com/wycats/javascript-decorators).\r\n>\r\n> Decorators help simplify code by replacing the noise of common patterns with declarative annotations.\r\n>\r\n> Conversely, decorators can also be overused and create obscurity. Decko establishes 3 standard decorators that are immediately recognizable, so you can avoid creating decorators in your own codebase.\r\n>\r\n> Works by default with Babel 5.x. To use with Babel 6+, install [transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy).\r\n\r\n\r\n## Installation\r\n\r\nAvailable on [npm](https://npmjs.com/package/decko):\r\n\r\n```sh\r\nnpm i -S decko\r\n```\r\n\r\n\r\n## Usage\r\n\r\nEach decorator method is available as a named import.\r\n\r\n```js\r\nimport { bind, memoize, debounce } from 'decko';\r\n```\r\n\r\n\r\n### `@bind`\r\n\r\n```js\r\nclass Example {\r\n\t@bind\r\n\tfoo() {\r\n\t\t// the value of `this` is always the object from which foo() was referenced.\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nlet e = new Example();\r\nassert.equal(e.foo(), e);\r\n```\r\n\r\n\r\n\r\n### `@memoize`\r\n\r\n> Cache values returned from the decorated function.\r\n> Uses the first argument as a cache key.\r\n> _Cache keys are always converted to strings._\r\n>\r\n> ##### Options:\r\n>\r\n> `caseSensitive: false` - _Makes cache keys case-insensitive_\r\n>\r\n> `cache: {}` - _Presupply cache storage, for seeding or sharing entries_\r\n\r\n```js\r\nclass Example {\r\n\t@memoize\r\n\texpensive(key) {\r\n\t\tlet start = Date.now();\r\n\t\twhile (Date.now()-start < 500) key++;\r\n\t\treturn key;\r\n\t}\r\n}\r\n\r\nlet e = new Example();\r\n\r\n// this takes 500ms\r\nlet one = e.expensive(1);\r\n\r\n// this takes 0ms\r\nlet two = e.expensive(1);\r\n\r\n// this takes 500ms\r\nlet three = e.expensive(2);\r\n```\r\n\r\n\r\n\r\n### `@debounce`\r\n\r\n> Throttle calls to the decorated function. To debounce means \"call this at most once per N ms\".\r\n> All outward function calls get collated into a single inward call, and only the latest (most recent) arguments as passed on to the debounced function.\r\n>\r\n> ##### Options:\r\n>\r\n> `delay: 0` - _The number of milliseconds to buffer calls for._\r\n\r\n```js\r\nclass Example {\r\n\t@debounce\r\n\tfoo() {\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nlet e = new Example();\r\n\r\n// this will only call foo() once:\r\nfor (let i=1000; i--) e.foo();\r\n```\r\n\r\n\r\n---\r\n\r\nLicense\r\n-------\r\n\r\nMIT\r\n","google":"UA-6031694-18","note":"Don't delete this file! It's used internally to help with page regeneration."}